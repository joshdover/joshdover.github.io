<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josh Dover</title>
    <link>https://joshdover.github.io/</link>
    <description>Recent content on Josh Dover</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 May 2018 22:57:43 +0000</lastBuildDate>
    
	<atom:link href="https://joshdover.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tech Ethics: Addictive technology</title>
      <link>https://joshdover.github.io/tech-ethics-addictive-technology/</link>
      <pubDate>Mon, 28 May 2018 22:57:43 +0000</pubDate>
      
      <guid>https://joshdover.github.io/tech-ethics-addictive-technology/</guid>
      <description>This is part 2 in a series on ethics in the tech industry. In this post I&amp;rsquo;m going to explore the topic of addictive apps and technology. What roles do they play in our daily lives? How do technologists use psychology to drive engagement? How do we decide if an app exists for the benefit or detriment of the individual and our society?
This post means to be the start of the conversation, not a prescription of a solution.</description>
    </item>
    
    <item>
      <title>Tech&#39;s Ethical Negligence</title>
      <link>https://joshdover.github.io/techs-ethical-negligence/</link>
      <pubDate>Wed, 04 Apr 2018 03:39:32 +0000</pubDate>
      
      <guid>https://joshdover.github.io/techs-ethical-negligence/</guid>
      <description>Tech is at a cross-roads. The move fast and break things mantra of Silicon Valley is actually breaking things.
Regardless of whether or not the people making the decisions at Facebook were bad actors (or negligent), the hands building this stuff have a responsibility as well. Despite how smart the engineers of the world think we are, we&amp;rsquo;re still easily manipulated and blinded by an idealistic vision. The hands that built these platforms may have only intended good to flow from their existence.</description>
    </item>
    
    <item>
      <title>My first six months as an engineering lead</title>
      <link>https://joshdover.github.io/my-first-six-months-as-an-engineering-lead/</link>
      <pubDate>Mon, 19 Mar 2018 11:28:00 +0000</pubDate>
      
      <guid>https://joshdover.github.io/my-first-six-months-as-an-engineering-lead/</guid>
      <description>It&amp;rsquo;s a transition that&amp;rsquo;s been rehashed by many before me: going from developer to manager. I&amp;rsquo;ve been making this transition over the last six months at Cratejoy and thought I&amp;rsquo;d share what I&amp;rsquo;ve learned so far.
For context, Cratejoy is a relatively small startup with about a dozen engineers. Before myself, there had only been two other engineering managers (our CTO and my boss). You could definitely say my &amp;ldquo;training&amp;rdquo; was ad hoc.</description>
    </item>
    
    <item>
      <title>Why the Basecamp way of product management hasn&#39;t worked for us</title>
      <link>https://joshdover.github.io/why-the-basecamp-way-of-product-management-doesnt-work-for-us/</link>
      <pubDate>Thu, 01 Jun 2017 01:55:00 +0000</pubDate>
      
      <guid>https://joshdover.github.io/why-the-basecamp-way-of-product-management-doesnt-work-for-us/</guid>
      <description>A few weeks ago, Jonas Downey from Basecamp posted an article about how they handle software changes while keeping their customers happy. The topics covered are eerily relevant to a recent initiative at Cratejoy. I want to share how I think about and deal with what we define as “product debt.”
If you haven’t read it, Downey’s central point is that to keep customers happy, you simply can’t remove features.</description>
    </item>
    
    <item>
      <title>The human side of writing good software</title>
      <link>https://joshdover.github.io/the-human-side-of-writing-good-software/</link>
      <pubDate>Sat, 18 Feb 2017 02:38:00 +0000</pubDate>
      
      <guid>https://joshdover.github.io/the-human-side-of-writing-good-software/</guid>
      <description>A maintainable codebase, the holy grail of every software architect’s dreams. For some engineers, it’s something we obsess over: a harmonious construct of easy-to-modify code, a product that can we can remold to the changing requirements of our customers. Unfortunately, the “business reasons” for investing time into writing good software are less clear and often misunderstood.
Flexibility has always come at an expensive cost: time. We’ve found practical, quantifiable ways to justify a focus on maintainability: reduced hours fixing bugs, faster iteration cycles, quicker on-boarding of new developers.</description>
    </item>
    
  </channel>
</rss>